{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Workflow","text":"<p>mermaid</p> <pre><code>flowchart LR\n    subgraph ETL[Pipeline]\n        A(Multiple Excel files) --&gt; B[Extract: extract_from_excel]\n        B[Extract: extract_from_excel] --&gt; |Generate Dataframes list| C[Transformation: concat_dataframes]\n        C[Transformation: concat_dataframes] --&gt; |Generate concatenated Dataframe| D[Load: Convert to Excel]\n        D(Load: Convert to Excel) --&gt; |Save Excel file| E[Output folder: Unique Excel file]\n\n    end</code></pre>"},{"location":"#extract-function","title":"Extract Function","text":"<p>Extract data from Excel files.</p> <p>type: input_folder: str</p> Source code in <code>project_structure/pipeline/extract.py</code> <pre><code>def extract_from_excel(path: str) -&gt; List[pd.DataFrame]:\n    \"\"\"\n    Extract data from Excel files.\n\n    type: input_folder: str\n    \"\"\"\n    all_files = glob.glob(os.path.join(path, '*.xlsx'))\n    if not all_files:\n        raise ValueError('No Excel files found in the specified folder')\n\n    all_data = []\n    for file in all_files:\n        print(f'Reading file: {file}')\n        all_data.append(pd.read_excel(file))\n\n    # all_data = [pd.read_excel(file) for file in all_files]\n\n    return all_data\n</code></pre>"},{"location":"#transform-function","title":"Transform Function","text":"<p>Concatenates the entire list of dataframes into one dataframe.</p> Source code in <code>project_structure/pipeline/transform.py</code> <pre><code>def concat_dataframes(dataframe_list: List[pd.DataFrame]):\n    \"\"\"Concatenates the entire list of dataframes into one dataframe.\"\"\"\n    print(f'Concatenating files.')\n    return pd.concat(dataframe_list, ignore_index=True)\n</code></pre>"},{"location":"#welcome-to-mkdocs","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"load/","title":"Load Function","text":"<p>Save dataframe into excel file.</p> <p>args: dataframe (pd.Dataframe): dataframe to be saved. output_path (str): path for the file to be saved. file_name (str): name of the file that will be saved.</p> <p>return: 'File saved successfuly.'</p> Source code in <code>project_structure/pipeline/load.py</code> <pre><code>def load_excel(\n    dataframe: pd.DataFrame, output_pah: str, file_name: str\n) -&gt; str:\n    \"\"\"Save dataframe into excel file.\n\n    args:\n    dataframe (pd.Dataframe): dataframe to be saved.\n    output_path (str): path for the file to be saved.\n    file_name (str): name of the file that will be saved.\n\n    return: 'File saved successfuly.'\n    \"\"\"\n    print('Generating concatenated file.')\n    if not os.path.exists(output_pah):\n        os.makedirs(output_pah)\n    dataframe.to_excel(f'{output_pah}/{file_name}.xlsx', index=False)\n\n    return 'File saved successfuly.'\n</code></pre>"}]}